<?php
// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * Version details.
 * @package    blocks
 * @subpackage assessment_information
 * @copyright  2015 Queen Mary University of London Shubhendra Doiphode
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */


global $DB,$COURSE;
/*
$nextsection = 999;
## Check if section already exists
//$sql_coursesection = "select section from {course_sections} where name='Generated by Assessment Information block' and course=".$COURSE->id." order by id desc";

$sql_coursesection = "
select section
from {course_sections}
where course = $COURSE->id
and (sequence = '666' or sequence like '666,%' or sequence like '%,666,%' or sequence like '%,666')
";


$courseSectionData = $DB->get_records_sql($sql_coursesection);
$csec_count = 0;
foreach($courseSectionData as $catsection){
    $nextsection = $catsection->section;
}
*/
$nextsection = course_get_format($COURSE)->get_last_section_number()+1;
// defined('TOPIC_ZERO_SECTION') || define('TOPIC_ZERO_SECTION','52');
defined('TOPIC_ZERO_SECTION2') || define('TOPIC_ZERO_SECTION2',$nextsection);


class block_assessment_information extends block_base
{

    public function init()
    {
        $this->title = get_string('pluginname', 'block_assessment_information');
        $this->check4section();
    }

    protected function check4section() {
        global $COURSE,$DB;
        // Only add the section if the AI block is installed and it does not already exist and copy any additional text from the old AI tab into it
        $sql = "
        SELECT * 
        FROM {block_instances} bi
        JOIN {context} cx ON cx.id = bi.parentcontextid
        JOIN {course} c ON c.id = cx.instanceid
        WHERE cx.contextlevel = 50
        AND bi.blockname = 'assessment_information'
        AND c.id = $COURSE->id
        ";
        $ai_block = $DB->get_records_sql($sql);
        $ai_section = $this->get_ai_section($COURSE);
        if ($ai_block && !$ai_section) {
            if($old_ai_section = $this->get_old_ai_section($COURSE)) { // there is a legacy AI section so prepend the sequence hack
                if ($old_ai_section->sequence == '') {
                    $old_ai_section->sequence = '666';
                } else {
                    $old_ai_section->sequence = '666,'.$old_ai_section->sequence;
                }
                $DB->update_record('course_sections', $old_ai_section);
            } else { // add a new AI section
                // get the text content of the old AI tab
                $fo_content_assessmentinformation = $DB->get_record('course_format_options', array('courseid' => $COURSE->id, 'name' => 'content_assessmentinformation'));

                $ai_section_title = get_string('ai_section_title','block_assessment_information');
                $ai_section = $this->add_invisible_ai_section($COURSE, $ai_section_title, $fo_content_assessmentinformation->value);
            }
            rebuild_course_cache($COURSE->id, true);
        }
    }
    protected function check4section0() {
        global $COURSE,$DB;
        // Only add the section if the AI block is installed and it does not already exist and copy any additional text from the old AI tab into it
        $sql = "
        SELECT * 
        FROM {block_instances} bi
        JOIN {context} cx ON cx.id = bi.parentcontextid
        JOIN {course} c ON c.id = cx.instanceid
        WHERE cx.contextlevel = 50
        AND bi.blockname = 'assessment_information'
        AND c.id = $COURSE->id
        ";
        $ai_block = $DB->get_records_sql($sql);
        $ai_section = $this->get_ai_section($COURSE);
        if ($ai_block && !$ai_section) {
            // get the text content of the old AI tab
            $fo_content_assessmentinformation = $DB->get_record('course_format_options', array('courseid' => $COURSE->id, 'name' => 'content_assessmentinformation'));

            $ai_section_title = get_string('ai_section_title','block_assessment_information');
            $ai_section = $this->add_invisible_ai_section($COURSE, $ai_section_title, $fo_content_assessmentinformation->value);
            rebuild_course_cache($COURSE->id, true);
        }
    }

    /**
     * Add a new section related to the AI block
     * This is where we will store additional modules if they are added to the block.
     * To identify the relation with the block we hack the sequence field a bit:
     * If 666 is present it is considered the AI section
     *
     * @param $course
     * @param string $name
     * @param string $summary
     * @return stdClass
     * @throws dml_exception
     */
    protected function add_invisible_ai_section($course, $name = '', $summary = '') {
        global $COURSE, $DB;

        $numsections = course_get_format($course)->get_last_section_number();
        $section = course_create_section($course->id, $numsections+1, true);
        $section->name = $name;
        $section->summary = $summary;
        $section->visible = 0; // invisibility as promised
        $section->sequence = 666; // the number of the beast as we are misusing the sequence here -> This will identify the section as belonging to the Assessment Information block
        $DB->update_record('course_sections', $section);
        return $section;
    }

    /**
     * Get a section created by the Assessment Information block
     * For now it is identified by hacking the sequence field of that section:
     * If it contains the section id 666 (the number of the beast as we are doing evil here...) it is related to the AI block.
     *
     * @param $course
     * @return mixed
     * @throws dml_exception
     */
    protected function get_ai_section($course) {
        global $DB;
        $sql = "
            select * 
            from {course_sections} 
            where course = $course->id 
            and (sequence = '666' or sequence like '666,%' or sequence like '%,666,%' or sequence like '%,666')
        ";
        $result = $DB->get_records_sql($sql);
        return reset($result); // get the 1st element of the returned array - should have one element only anyway
    }

    // try to get a legacy AI section identified by the section name
    protected function get_old_ai_section($course) {
        global $DB;

        $sql = "
            select * 
            from {course_sections} 
            where course = $course->id 
            and name = 'Generated by Assessment Information block'
        ";
        $result = $DB->get_records_sql($sql);
        return reset($result); // get the 1st element of the returned array - should have one element only anyway
    }

    public function hide_header(){
        return true;
    }

    public function instance_allow_multiple()
    {
        return false;
    }

    function instance_allow_config() {
        return true;
    }

    public function applicable_formats()
    {
        return array(
            'course-view' => true,
        );
    }

	function has_config() {
        return true;
    }
	/**
	 * get_content moodle internal function that is used to get the content of a block
	 *
	 */
    public function get_content()
    {
        global $CFG, $COURSE, $DB;
        require_once($CFG->dirroot . '/blocks/assessment_information/classlib.php');

        if($this->content !== NULL) {
            return $this->content;
        }

        // $section = $DB->get_record('course_sections', array('section'=>TOPIC_ZERO_SECTION, 'course'=>$COURSE->id));
        $section = $DB->get_record('course_sections', array('section'=>TOPIC_ZERO_SECTION2, 'course'=>$COURSE->id));
        if($section && $section->visible){
            require_once($CFG->dirroot . '/course/lib.php');
            course_update_section($section->course, $section, array('visible' => 0));
        }

        $assessment_information = new assessment_information($COURSE->id,$this->page->theme->name);


		// CODE ADDED TO CHANGE ACTIVITY ADDED IN SECTION-52 TO STEALTH STARTS HERE
        $cid = $COURSE->id;
        $sequence = isset($section->sequence) ? $section->sequence:"";
	if ($sequence!="") {
        $sql_stealth = "UPDATE {course_modules} SET visible=1, visibleoncoursepage=0 WHERE id in (" . $sequence . ")";

        $DB->execute($sql_stealth);

        rebuild_course_cache($cid);


	}
        // CODE ADDED TO CHANGE ACTIVITY ADDED IN SECTION-52 TO STEALTH STARTS HERE

        $this->content = new stdClass();

        $assessmentrenderer = $this->page->get_renderer('block_assessment_information');
        $assessmentrenderer->block_content($this->content, $this->instance->id, $this->config,
            $assessment_information);

        // $this->content .= "<input type='text' value='23' id='txt_nextsectionid'>";
        return $this->content;
    }
}
